# -----------------heap_maximum(A)返回最大关键字的元素---------------------
# O(1)
heap_maximum(A)         # 
    return A[1]


# -----------------heap_extract_max(A)去掉并返回堆中的具有最大关键字的元素----------------  
# ------O(lgn)------
heap_extract_max(A)
    if A.heap_size < 1
        error "heap underflow"
    max = A[1]
    A[1] = A[A.heap_size]           # 使用最后一元素覆盖掉根
    A.heap_size = A.heap_size - 1   # 去掉最后一元素（这一步和上一步就是把最后一元素移到此堆的根位置，再将堆的规模减1）
    max_heapify(A, 1)
    return max
    
# ------------------heap_increase_key(A, x, k)将元素x的关键字值增加到k,这里假设k的值不小于x的原关键字值-------
# -------O(lgn)
heap_increase_key(A, i, key)
    if key < A[i]
        error 'new key is smaller than current key'
    A[i] = key
    # 我容易使用while i>1 之后使用if A[parent]<A[i]，会多出一些无效的比较：以后要注意while 和if的连用时，是否可以简化
    while i > 1 and A[praent(i)] < A[i]     # parent(i)=int(i/2), 当i=1时增大的就是根关键字的值它本来就是最大的，再增大也不用换位
        exchange A[i] with A[parent(i)]
        i = parent(i)

# ------------------max_heap_insert(A, x)把元素x插入到堆中----------------------
# -------O(lgn)
max_heap_insert(A, key)
    A.heap_size = A.heap_size + 1
    A[A.heap_size] = -infinite
    heap_increase_key(A, A.heap_size, key)
