# -----------最大值和最小值-------
minnum(A)
    min = A[1]
    for i=2 to A.length
        if min > A[i]
            min  = A[i]
    return min
# 为了确定最小值必须做n-1次比较，以上算法是最优的

# -----------同时找到最小值和最大值--------------
# 事实上，只需最多做3int(n/2)此比较就可以同时找到最小和最大值
# 思路：记录已知的最小值和最大值，每次成对输入元素，
# 先将此对元素进行比较，然后把较小的与当前最小值比较，较大的与当前最大值进行比较。这样，对没两个元素共需3次比较。
# 若n是奇数将最大值和最小值的初值都设为第一个元素的值；若n是偶数就对前两元素比较，以确定min和max初值。最后成对处理剩余元素


# 辅助函数zero_one(a, b)（输入两个数，再由小到大输出）
zero_one(a, b)
    if a > b
        return b, a
    return a, b

get_min_max(A)
    n = A.length
    if n%2 == 1
        min = max = A[1]
        start = 2
    else
        min, max = zero_one(A[1], A[2])
        start = 3
    for i=start; i < n ;i+=2
            temp_min, temp_max = zero_one(A[i], A[i+1])
            if min > temp_min
                min = temp_min
            if max < temp_max
                max = temp_max
                
# ----------寻找数组中第i小的元素---------------
# 返回数组A[p..r]中第i小的元素
random_select(A, p, r, i)
    if p == r
        return A[p]
    q = random_partition(A, p, r)       
    k = q-p+1                                   # 此时A[k]放着数组A的第k小的元素
    if i== k
        return A[q]
    elif i < k
        return random_select(A, p, q-1, i)
    else                                        # 此时知道有k个值小于A[p..r]中的第i-k小的元素
        random_select(A, q+1, r, i-k)
# 结论：假设所有的元素都是互异的，在期望线性时间内容，可以找到任一顺序统计量，特别是中位数。

